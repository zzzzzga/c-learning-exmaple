操作符重载


全局函数实现操作符重载
ClassName operator+(ClassName &obj1, ClassName &obj2);

成员函数实现操作符重载
ClassName operator+(ClassName & obj2);

成员函数中，隐藏了一个this参数


一元运算符重载
前置++，--
后置++，--

用全局函数实现
	前置++，--
	返回对象本身 ClassName &
	ClassName & operator++(ClassName & obj)
	{
		return obj;
	}
用成员函数实现
	前置++，--
	返回对象本身 ClassName &
	ClassName & operator--()
	{
		return *this;
	}

用全局函数实现后置++，--
	返回一个元素 ClassName
	ClassName operator++(ClassName &obj, int)
	{
		ClassName tmp = obj;
		//先保存原来的对象，在做++，--的操作

		return tmp;
	}

用成员函数实现后置++，--
	返回一个元素 ClassName
	ClassName operator--(int)
	{
		ClassName tmp = *this;
		//先保存原来的对象，在做++，--的操作

		return tmp;
	}


之前的所有运算符+，-，*，/,++,--都使用成员函数来实现


友元函数实现运算符重载的场景
cout << obj;	//必须重载<<操作符，才能实现obj的输出

ostream& operator<<(ostream &out, ClassName obj)
{
	out<<"111"<<endl;
	return out;
}

函数返回值当左值，需要返回一个引用

友元函数用于重载两个操作数类型不同的运算符

友元函数不能用于实现 =, (), [], ->


重载=操作符
1、先释放旧的内存
2、返回引用	//链式编程
3、=，自右向左结合

重载[]操作符
int operator[](int index);
或int& operator[](int index);	//当左值

看业务需求


==
!=
bool operator!=(ClassName &obj);
bool operator==(ClassName &obj);


()重载
返回值 operator()(参数);
ClassName A;
A();	//感觉跟函数调用差不多


&&, ||
原来有短路机制，而函数重载不能实现短路




